/* eslint-disable prefer-destructuring *//** * Created by charles on 2018/5/30. */import React, { PureComponent } from 'react';import './index.less';import { connect } from 'react-redux';import { Button, Col, Form, Row, Select, Layout, Table, Modal, Checkbox } from 'antd';import { bindActionCreators } from "redux";import actions from "../../stores/actions/resumeActions";import { Link } from "react-router";const FormItem = Form.Item;const Content = Layout.Content;const { info, error, success } = Modal;const generalLayout = { md: 24, lg: 12, xl: 8 };class Edit extends PureComponent {  constructor(props) {    super(props);    this.state = {      //文件上传loading      selectedRowKeys: [],      selectedRows: [],      columnsObj: [{        title: '列名(Column names)',        key: 'excel_collum_name',        dataIndex: 'excel_collum_name'      }, {        title: '多选操作(Multi Operation)',        key: 'isEdit',        render: (text, record) => {          return (            <Form.Item              label=""            >              {this.props.form.getFieldDecorator(`checkbox-group_${record.id}`, {                initialValue: record.initialChecked || [],              })(                <Checkbox.Group style={{ width: "100%" }}>                  <Row>                    <Col span={8}><Checkbox value="can_edit">是否可编辑(canEdit)</Checkbox></Col>                    <Col span={8}><Checkbox value="can_view">是否可展示(isShow)</Checkbox></Col>                    <Col span={8}><Checkbox value="can_search">是否可搜索(isSearch)</Checkbox></Col>                  </Row>                </Checkbox.Group>              )}            </Form.Item>          )        }      }]    };  }  componentDidMount() {    this.getFileList();  }  componentWillReceiveProps(nextProps) {    // 操作提示    if (this.props.operateSuccessFlag !== nextProps.operateSuccessFlag && nextProps.operateSuccessFlag === true) {      this.showSuccess(nextProps.operateInfo);      this.props.actions.resetState();    }    if (this.props.operateFailFlag !== nextProps.operateFailFlag && nextProps.operateFailFlag === true) {      this.showError(nextProps.operateInfo);      this.props.actions.resetState();    }  }  getFileList = () => {    this.props.actions.getFileList();  };  // 加载表格数据  loadPage = (pageNo = 1, pageSize = 20) => {    this.setState({      pageNo,    }, () => {      this.props.form.validateFields((err, values) => {        if (!err) {          let postData = {};          postData.pageNo = pageNo;          postData.pageSize = pageSize;          postData.tableName = values.fileId;          this.props.actions.getTableCollumPage(postData);          // 清空勾选          this.setState({            selectedRowKeys: [],            selectedRows: [],          });        }      });    });  };  // 翻页  handlePageChange = (pageNo, pageSize) => {    this.loadPage(pageNo, pageSize);  };  // 切换pageSize  handleShowSizeChange = (current, pageSize) => {    this.loadPage(1, pageSize);  };  handleSearch = (e) => {    e && e.preventDefault();    this.loadPage();  };  // 批量更新  batchUpdate = () => {    const { selectedRowKeys } = this.state;    const { getFieldValue } = this.props.form;    let list = [];    const tableName = getFieldValue('fileId');    if (tableName && tableName !== '') {      selectedRowKeys.forEach(item => {        let temp = getFieldValue(`checkbox-group_${item}`);        let arr = [];        temp.includes('can_search') ? arr.push(1) : arr.push(0);        temp.includes('can_edit') ? arr.push(1) : arr.push(0);        temp.includes('can_view') ? arr.push(1) : arr.push(0);        list.push({          id: item,          value: arr        })      });      this.props.actions.tableCollumManager({ list, tableName: getFieldValue('fileId') });    } else {      Modal.error({        title: 'Tips',        content: 'Please select the file!',      });    }  };  showSuccess = (msg) => {    success({      title: 'Success',      content: msg,      okText: 'Confirm',      okType: 'info',      onOk: () => {        this.loadPage();      },    });  };  showError = (msg) => {    error({      title: 'Faild',      content: msg,      okText: 'Confirm',      okType: 'info',    });  };  showInfo = (msg) => {    info({      title: 'Tips',      content: msg,      okText: 'Confirm',      okType: 'info',    });  };  // 查询表头  changeSelectGroup = (value) => {    if (value && value !== '') {      this.loadPage();    }  };  resetForm = () => {    // 清空勾选    this.setState({      selectedRowKeys: [],      selectedRows: [],    });    this.props.actions.clearData();    this.props.form.resetFields();  };  render() {    const { getFieldDecorator } = this.props.form;    const { columnListPage, fileList } = this.props;    const { selectedRowKeys, columnsObj } = this.state;    const { pageNum, total, pageSize } = this.props.pageInfo;    // 分页数据    const pagination = {      current: pageNum,      total: total,      pageSize: pageSize,      showSizeChanger: true,      showQuickJumper: true,      onChange: this.handlePageChange,      onShowSizeChange: this.handleShowSizeChange,    };    const rowSelection = {      selectedRowKeys,      onChange: (selectedRowKeys, selectedRows) => {        this.setState({          selectedRowKeys,          selectedRows        });      },      getCheckboxProps: record => ({        disabled: false, // Column configuration not to be checked        name: record.name,      }),    };    return (      <div className="page-index">        <Content>          <Form            className="ant-advanced-search-form"            onSubmit={this.handleSearch}          >            <Row gutter={24}>              <Col span={10}                   style={{ height: 70 }}>                <FormItem labelCol={{ span: 6 }} wrapperCol={{ span: 18 }}                          label="文件(File)">                  {getFieldDecorator('fileId', {                    rules: [{                      required: true,                      whitespace: true,                      message: "Please select the file!",                    }]                  })(                    <Select                      showSearch                      optionFilterProp="children"                      allowClear                      style={{ width: 400 }}                      placeholder="请选择"                      onSelect={this.changeSelectGroup}>                      {                        fileList && fileList.length > 0 && fileList.map(item => {                          return (<Select.Option title={item.excelName} key={`tableFile_${item.id}`}                                                 value={item.tableName}>{item.excelName}</Select.Option>)                        })                      }                    </Select>,                  )}                </FormItem>              </Col>            </Row>            <Row gutter={24}>              <Col {...generalLayout} style={{ marginLeft: '100px', marginBottom: '15px' }}>                <Button type="default" onClick={this.resetForm}>重置(Reset)</Button>              </Col>            </Row>          </Form>          <h3 style={{ margin: '0 0 5px', paddingTop: '25px', borderTop: '1px solid #ddd' }}></h3>          <Row gutter={24} style={{ marginBottom: '10px' }}>            <Col style={{ textAlign: 'left' }}                 span={12}>              <Button type="primary" onClick={this.batchUpdate} disabled={!selectedRowKeys.length > 0}>批量更新(Batch Update)</Button>              &nbsp;&nbsp;&nbsp;&nbsp;<Link to={'/admin'}>跳转信息编辑(Jump Edit Info)</Link>            </Col>            <Col style={{ textAlign: 'right' }}                 span={12}>              <div className="search-count">                共 {pagination.total} 条              </div>            </Col>          </Row>          <Table scroll={{ x: 'max-content' }}                 rowKey="id"                 className="table-list"                 rowSelection={rowSelection}                 dataSource={columnListPage}                 columns={columnsObj}                 pagination={pagination} />        </Content>      </div>    );  }}const FinalEdit = Form.create()(  Edit,);const mapStateToProps = (state) => {  const {    resultList,    operateSuccessFlag,    operateFailFlag,    operateInfo,    tableList,    fileList,    refreshFileFlag,    columnListPage,    pageInfo,    loading,  } = state.resumeReducer;  return {    resultList,    operateSuccessFlag,    operateFailFlag,    operateInfo,    tableList,    fileList,    refreshFileFlag,    columnListPage,    pageInfo,    loading,  }};const mapDispatchToProps = dispatch => {  return {    actions: bindActionCreators(actions, dispatch)  }};export default connect(  mapStateToProps,  mapDispatchToProps)(FinalEdit);