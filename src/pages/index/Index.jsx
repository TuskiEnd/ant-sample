/* eslint-disable prefer-destructuring *//** * Created by charles on 2018/5/30. */import React, { PureComponent } from 'react';import './Index.less';import { connect } from 'react-redux';import { Button, Col, Form, message, Row, Select, Layout, Table, Modal, Spin, Input, Upload } from 'antd';import moment from 'moment/moment';import { bindActionCreators } from "redux";import actions from "../../stores/actions/resumeActions";const FormItem = Form.Item;const Content = Layout.Content;const { info, error, success } = Modal;const generalLayout = { md: 24, lg: 12, xl: 8 };class Index extends PureComponent {  constructor(props) {    super(props);    this.state = {      isShowModal: false,      //文件上传loading      fileLoading: false,      confirmLoading: false,      selectedRowKeys: [],      selectedRows: [],    };  }  componentDidMount() {    this.getFileList();  }  componentWillReceiveProps(nextProps) {    if (this.props.refreshFileFlag !== nextProps.refreshFileFlag && nextProps.refreshFileFlag) {      this.getFileList();      this.props.actions.resetState();    }  }  downloadTmpl = (fileSource) => {  };  // 加载表格数据  loadPage = (pageNo = 1, pageSize = 50) => {    this.setState({      pageNo,    }, () => {      this.props.form.validateFields((err, values) => {        values.pageNo = pageNo;        values.pageSize = pageSize;      });    });  };  // 翻页  handlePageChange = (pageNo, pageSize) => {    this.loadPage(pageNo, pageSize);  };  // 切换pageSize  handleShowSizeChange = (current, pageSize) => {    this.loadPage(1, pageSize);  };  handleSearch = (e) => {    e && e.preventDefault();    this.loadPage();  };  // 批量更新  batchUpdate = () => {    const { selectedRows } = this.state;    console.log(selectedRows);  };  showSuccess = () => {    success({      title: '操作成功',      content: '',      okText: '确定',      okType: 'info',      onOk: () => {        this.loadPage();      },    });  };  showError = (msg) => {    error({      title: msg,      content: '',      okText: '确定',      okType: 'info',    });  };  showInfo = (msg) => {    info({      title: msg || '还未选择人员，请先勾选员工再配置！',      content: '',      okText: '确定',      okType: 'info',    });  };  // 带出薪资月  changeSelectGroup = (value) => {  };  getFileList = () => {    this.props.actions.getFileList();  };  // modal  handleShowModal = (params) => {    const { modalVar, flag, cb } = params;    this.setState({      [modalVar]: flag    });    cb && cb();  };  download = (data, fileName) => {    if (!data) {      return;    }    const blob = new Blob([data], { type: 'application/vnd.ms-excel;charset=utf-8' });    const url = window.URL.createObjectURL(blob);    const link = document.createElement('a');    link.style.display = 'none';    link.href = url;    link.setAttribute('download', fileName);    document.body.appendChild(link);    link.click();  };  handleBlur = ({ key, value, formKey, id }) => {    const { setFieldsValue } = this.props.form;    setFieldsValue({ [formKey]: value });    this.props.actions.editData({ key, value, id });  };  resetForm = () => {    this.props.form.resetFields();  };  render() {    const that = this;    const { getFieldDecorator } = this.props.form;    const { columnList, tableList: dataSource } = this.props;    const columnsObj = columnList && columnList.length > 0 ? columnList.filter(item => item.canView === 1).map(item => {      return ({        title: item.excelCollumName,        key: item.tableId,        render: (text, record) => {          if (item.canEdit === 1) {            return (<FormItem label="">              {getFieldDecorator(`${item.tableId}_${record.id}`, {                initialValue: record[item.tableId],                onChange: (e) => this.handleBlur({                  id: record.id,                  formKey: `${item.tableId}_${record.id}`,                  value: e.target.value,                  key: item.tableId,                })              })(                <Input placeholder="请输入" />              )}            </FormItem>)          } else {            return (<span>{record[item.tableId]}</span>)          }        }      })    }) : [{      title: 'aaa',      dataIndex: 'aaa',      key: 'aaa',    }];    const { isShowModal, confirmLoading, fileLoading, selectedRowKeys } = this.state;    const { pageNum = 1, pageSize = 10, loading = false } = this.props.tableList;    const total = this.props.tableList.length || 1;    // 分页数据    const pagination = {      current: pageNum,      total: total,      pageSize: pageSize,      showSizeChanger: true,      showQuickJumper: true,      onChange: this.handlePageChange,      onShowSizeChange: this.handleShowSizeChange,    };    const formOtherLayout = {      labelCol: { span: 6 },      wrapperCol: { span: 18 },    };    const props = {      name: 'file',      beforeUpload(file, fileList) {      },      showUploadList: false,      customRequest(info) {        // 上传大小限制10M        if (info.file && (info.file.size / 1024 / 1024) > 10) {          message.error('请上传小于10M的文件！');          return false;        }        that.setState({          fileLoading: true        });        const formData = new FormData();        formData.append('file', info.file);        formData.append('originalFilename', info.file.name);        // 调接口        this.props.actions.uploadFile(formData);      },    };    const rowSelection = {      onChange: (selectedRowKeys, selectedRows) => {        this.setState({          selectedRowKeys,          selectedRows        });      },      getCheckboxProps: record => ({        disabled: false, // Column configuration not to be checked        name: record.name,      }),    };    return (      <div className="page-index">        <Spin spinning={fileLoading}>          <Content>            <Form              className="ant-advanced-search-form"              onSubmit={this.handleSearch}            >              <Row gutter={24}>                <h3>文件上传</h3>                <Col {...generalLayout}                     style={{ height: 70 }}>                  <FormItem {...formOtherLayout}                            label="文件">                    {getFieldDecorator('fileId')(                      <Select                        showSearch                        optionFilterProp="children"                        allowClear                        style={{ width: 150 }}                        placeholder="请选择"                        onSelect={this.changeSelectGroup}>                        <Select.Option key={0} value={0}>文件1</Select.Option>                        <Select.Option key={1} value={1}>文件2</Select.Option>                        <Select.Option key={2} value={2}>文件3</Select.Option>                      </Select>,                    )}                  </FormItem>                </Col>                <Col span={6}                     style={{ textAlign: 'left' }}>                  <Upload {...props}>                    <Button type="primary">上传文件</Button>                  </Upload>                  <a href="javascript:;"                     className="link-btn"                     onClick={() => {                       this.downloadTmpl();                     }}>导出</a>                </Col>                <Col style={{ clear: 'both' }} />              </Row>              <Row gutter={24}>                <Col {...generalLayout}>                  <FormItem {...formOtherLayout}                            label="条件1">                    {getFieldDecorator('input')(                      <Input placeholder="请输入" style={{ width: '200px' }} />                    )}                  </FormItem>                </Col>              </Row>              <Row gutter={24}>                <Col {...generalLayout} style={{ marginLeft: '700px', marginBottom: '15px' }}>                  <Button type="primary" htmlType="submit">查询</Button>&nbsp;&nbsp;&nbsp;&nbsp;                  <Button type="default" onClick={this.resetForm}>重置</Button>                </Col>              </Row>            </Form>            <h3 style={{ margin: '0 0 5px', paddingTop: '25px', borderTop: '1px solid #ddd' }}>文件导入记录</h3>            <Row gutter={24} style={{ marginBottom: '10px' }}>              <Col style={{ textAlign: 'left' }}                   span={12}>                <Button type="primary" onClick={this.batchUpdate} disabled={!selectedRowKeys.length > 0}>批量更新</Button>              </Col>              <Col style={{ textAlign: 'right' }}                   span={12}>                <div className="search-count">                  共 {pagination.total} 条                </div>              </Col>            </Row>            <Spin spinning={loading}>              <Table scroll={{ x: '100%' }}                     rowKey="id"                     className="table-list"                     rowSelection={rowSelection}                     dataSource={dataSource}                     columns={columnsObj}                     pagination={pagination} />            </Spin>            <Modal              title="操作"              width={600}              visible={isShowModal}              confirmLoading={confirmLoading}              onCancel={() => {                this.handleShowModal({ modalVar: 'isShowModal', flag: false });              }}              okText="确认"              cancelText="取消"            >            </Modal>          </Content>        </Spin>      </div>    );  }}const FinalIndex = Form.create()(  Index,);const mapStateToProps = (state) => {  const {    resultList,    operateSuccessFlag,    operateFailFlag,    operateInfo,    tableList,    fileList,    refreshFileFlag,    columnList,  } = state.resumeReducer;  return {    resultList,    operateSuccessFlag,    operateFailFlag,    operateInfo,    tableList,    fileList,    refreshFileFlag,    columnList,  }};const mapDispatchToProps = dispatch => {  return {    actions: bindActionCreators(actions, dispatch)  }};export default connect(  mapStateToProps,  mapDispatchToProps)(FinalIndex);